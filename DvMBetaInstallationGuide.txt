


















DivumWX Beta 1.0.00rc2
[Blustery Bear] 
Installation documentation


Introduction

Welcome to the instructions for installing the DivumWX skin for WeeWX, version 1.0.00rc2. Please pay close attention to the Requirements section below.

Requirements
		
A fresh installation of weewx 5.1.x is installed using the pip method, which successfully generates reports from at least the Seasons skin. You can use the Simulator driver or the appropriate driver for your weather hardware.

Please note that you need a database with at least one day’s worth of data; otherwise, the DivumWX skin will error out because the database contains NULL values.

A bare, minimum installation should look something like this with the default Seasons skin


Python 3.11.x
      Modules: subprocess, os, time, datetime, sys, readchar, traceback, json, getpass, grp, pwd, distutils, zipfile and configobj (The Python installer, dvmInstaller.py, will verify and install 3rd party modules that are missing in the virtual environment)
It is highly recommended that you have installed Python 3.11.x globally before you install the Python Virtual Environment
PHP 8.3.x
      Modules: intl, json, mysqli, pdo_sqlite, random, session, sqlite3
If you have issues with PHP, a fantastic guide to use for the Raspberry Pi is: https://pimylifeup.com/raspberry-pi-latest-php/ 


Weewx MUST be fully operational and creating reports for at least 24 hours before progressing further. I cannot stress this enough. Also, this MUST be a standard install, using pip in a virtual environment following the documentation here. Failure to do so will break the beta and will result in your removal from the closed beta group.
Installation Part One
Setup

Verify that your version of pip is current
	pip install –upgrade pip

Download the beta archive from:
       https://www.divumwx.org/files/divumwx1.0.00rc2.tar.gz
        or
       https://www.divumwx.org/files/divumwx1.0.00rc2.zip

and transfer it to your weewx server along with the services.json file that you created at

	https://www.divumwx.org/settingsGen/
The new Settings Generator is required as the format has changed, and any previous settings file you’ve created is no longer usable
Log into your weewx server as the same user that installed weewx, and from the command line, enter the following command:

	source ~/weewx-venv/bin/activate

You will end up with the prompt as shown below. This indicates that you are in the Python Virtual Environment that weewx was installed to:



Running the following command will tell what user is running weewx
	ps aux | grep weewx
	


This shows that the user and group running/owning the weewx process is dietpi: dietpi on this machine. 



Running the following command will tell what user is running weewx
	ps aux | grep apache



This shows that the user and group that runs/owns the apache2 process on this machine is www-data:www-data.

Checking the default pip HTML_ROOT (public_html, which equates to /home/[username]/weewx-data/public_html) will show you where weewx is creating its files, and, as you can see, they are owned by dietpi:dietpi


Before proceeding, you must ensure that weewx has been properly installed and producing reports, as shown below. Failure to do so will result in the beta installer failing.


Extract the beta archive.
	tar -xvzf divumwx1.0.00rc2.tar.gz
	or
	unzip divumwx1.0.00rc2.zip

This will leave you with a directory DivumWX1.0.00rc2.  Move the services.json file into that new directory as well.
        mv ./services.json ./ DivumWX1.0.00rc2/services.json

Change into that directory.
	cd DivumWX1.0.00rc2/

Python Installer

In the DivumWX1.0.00rc2 directory, enter the following command:
	python dvmInstaller.py –debug

The “--debug” parameter IS REQUIRED for beta testers to use, as it generates a needed debug log file.

If you are missing one of the non-standard Python modules required by the installer, you will be prompted to install it.




Responding “Y” will install the necessary module and restart the script.



Pressing any key will then display the essential installation document.



Pressing “q” will exit the text viewer and proceed to the welcome message.



Pressing any key will continue, and the script will verify your Python version and verify that you are running in the Python virtual environment. Next, it checks the weewx version, then it gets the user running the script and verifies the user and group for file permissions:



Entering “n” will allow you to manually enter the user and group for file permissions; otherwise, entering “y” will accept what the script has found.

Next, the script will attempt to locate what software you are using for a web server and what user and group it’s run under, again for file permissions:



Entering “n” will allow you to enter the web server and user/group manually; otherwise, entering “y” will proceed.

Next, the script will inform you of the HTML_ROOT setting in the weewx.conf file and ask if you want to use that setting.



Entering “y” will accept what the script found; otherwise, entering “n” will allow you to input the full path for the HTML_ROOT.

HTML_ROOT is the directory where weewx is writing its report files, NOT necessarily the DOCUMENTROOT of your web server. In the case of a stock, standard pip installation, then the HTML_ROOT would be /home/[username]/weewx_data/public_html, and the URL of your weewx page would be however you linked it in your web server

Next, the script will ask you if you wish to change the webserver's document root. Since you’ve created reports using the Seasons skin, files will already be in the current document root. Unless you’ve deleted those files, it is highly suggested that you enter “y” to the following question to keep things clean and separate.



Entering “y” will append “divumwx” to the current “HTML_ROOT” setting and answering “n” will leave it alone.

Next, the script will ask if you want to use the DVM Backup service to back up your weewx database.



Entering “y” will allow you to enter the specifics for the DVM Backup service; entering “n” will bypass this section.


Now the script displays the inputs that it has loaded for you to look over and asks if you’re ready to have it start the installation process:




Once you’ve reviewed everything, if you enter “y,” the installation will proceed; otherwise, entering “n” will exit the script.


The script will proceed and inform you of the steps as they are completed.



You’ve completed the command-line Python installation. The next step is to visit the DivumWX Skin's home page and start the web-based initial setup.


Web Based Installation

Enter the URL that corresponds to where you installed the DivumWX files such as 

	http://yourdomain.com
or
	https://yourdomain.com.au/divumwx


Whatever URL you’ve assigned to your webserver to deliver your weewx reports, enter that and you’ll see the DivumWX Initial Setup page:

Clicking “Next” will start the verification process



If there are any errors, you will be notified; otherwise, the next button will be enabled. 


Click “Next” and the user settings file tab will be displayed.






This tab will notify you of any issue when the userSettings.php is written. When completed the “Next” button will be enabled. Click the next button.











Appendix A
Weewx Installation Script

The following script is something that I wrote to help provide a clean environment for me with everything needed to start fresh as I developed the DVM Installer. It only cleans out previous installations and sets up a blank installation. Please feel free to use it, but if you do, use it at your own risk.

#!/bin/bash
GREEN='\033[0;32m'
WHITE='\033[1;37m'
RED='\033[0;31m'
NC='\033[0m' # No Color

chkStatus() {
    if [[ $? -ne 0 ]]; then
        echo -e "${RED}Error occurred during: $1${NC}"
        exit 1
    fi
}

handleVenv() {
    local action=$1

    if [[ "$action" == "startup" ]]; then
        if [[ -n "$VIRTUAL_ENV" ]]; then
            echo -e "${RED}Virtual environment is activated. Deactivating...${NC}"
            source "$VIRTUAL_ENV/bin/activate"
            deactivate
            chkStatus "Deactivating virtual environment"
        else
            echo -e "${GREEN}No virtual environment is currently activated.${NC}"
        fi
    elif [[ "$action" == "install" ]]; then
        if [[ -z "$VIRTUAL_ENV" ]]; then
            echo -e "${RED}Error: Virtual environment was not activated.${NC}"
            exit 1
        else
            echo -e "${GREEN}Virtual environment is activated.${NC}"
        fi
    else
        echo -e "${RED}Invalid action specified for handle_venv: $action${NC}"
        exit 1
    fi
}

clnpInstall () {
    echo "Searching....."
    if [[ -d ~/weewx-venv || -d ~/weewx-data ]]; then
        echo -e "${WHITE}Existing WeeWX installation found.${NC}"
        read -p "Do you want to remove the existing installation? (y/n): " choice
        case "$choice" in
          y|Y )
            echo -e "${WHITE}Removing existing WeeWX installation...${NC}"
            sudo systemctl stop weewx
            sudo sh ~/weewx-data/scripts/setup-daemon.sh uninstall
            rm -rf ~/weewx-venv ~/weewx-data
            chkStatus "removing existing WeeWX installation."
            ;;
          n|N )
            echo -e "${RED}Exiting script. Please remove the existing installation manually.${NC}"
            exit 1
            ;;
          * )
            echo -e "${RED}Invalid choice. Exiting script.${NC}"
            exit 1
            ;;
        esac
    fi
}

clear
handleVenv startup
echo "WeeWX Installation started at $(date)"
echo "Checking for existing installation..."
clnpInstall

echo -e "${WHITE}Creating the virtual environment...${NC}"
python3 -m venv ~/weewx-venv
chkStatus "creating the virtual environment"

echo -e "${WHITE}Activating the WeeWX virtual environment...${NC}"
source ~/weewx-venv/bin/activate
chkStatus "activating the virtual environment"

echo -e "${WHITE}Ensuring the virtual environment is activated...${NC}"
handleVenv install

echo -e "${WHITE}Installing WeeWX into the virtual environment...${NC}"
python3 -m pip install weewx
chkStatus "installing WeeWX"

echo -e "${WHITE}Creating the station data...${NC}"
weectl station create
chkStatus "creating the station data"

echo -e "${WHITE}Setting up WeeWX to run as a daemon...${NC}"
sudo sh ~/weewx-data/scripts/setup-daemon.sh
chkStatus "setting up WeeWX to run as a daemon"

echo -e "${WHITE}Installing the GW1000 driver...${NC}"
weectl extension install https://github.com/gjr80/weewx-gw1000/releases/latest/download/gw1000.zip
chkStatus "installing the GW1000 driver"

echo -e "${WHITE}Configuring WeeWX to use the GW1000 driver...${NC}"
weectl station reconfigure --driver=user.gw1000
chkStatus "configuring WeeWX to use the GW1000 driver"

echo -e "${WHITE}Stopping WeeWX service...${NC}"
sudo systemctl stop weewx
chkStatus "stopping WeeWX service"

echo -e "${WHITE}Starting WeeWX service...${NC}"
sudo systemctl start weewx
chkStatus "starting WeeWX service"

echo -e "${GREEN}WeeWX setup is complete!${NC}"
echo "WeeWX setup is complete at $(date)"
echo "Deactivating Virtual Python Environment."
source "$VIRTUAL_ENV/bin/deactivate"
deactivate
